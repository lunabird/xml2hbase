/* Generated By:JJTree&JavaCC: Do not edit this line. XQueryParser.java */
package com.fatdog.xmlEngine.javacc;
import java.util.Stack;
public class XQueryParser/*@bgen(jjtree)*/implements XQueryParserTreeConstants, XQueryParserConstants {/*@bgen(jjtree)*/
  protected JJTXQueryParserState jjtree = new JJTXQueryParserState();

  final public StartNode getXQueryAST() throws ParseException {
                                       /*@bgen(jjtree) StartNode */
  StartNode jjtn000 = new StartNode(this, JJTSTARTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      mainModule();
                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                 jjtc000 = false;
                                                                 {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
                                                    if (jjtc000) {
                                                      jjtree.clearNodeScope(jjtn000);
                                                      jjtc000 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte000 instanceof RuntimeException) {
                                                      {if (true) throw (RuntimeException)jjte000;}
                                                    }
                                                    if (jjte000 instanceof ParseException) {
                                                      {if (true) throw (ParseException)jjte000;}
                                                    }
                                                    {if (true) throw (Error)jjte000;}
    } finally {
                                                    if (jjtc000) {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void exprComment() throws ParseException {
    jj_consume_token(ExprCommentStart);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ExprCommentContent:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(ExprCommentContent);
    }
    jj_consume_token(ExprCommentEnd);
  }

  final public void mainModule() throws ParseException {
    prolog();
    queryBody();
  }

  final public void prolog() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DeclareDefaultNamespace:
      case DeclareXMLSpace:
      case DeclareNamespace:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DeclareNamespace:
        namespaceDecl();
        break;
      case DeclareXMLSpace:
        xmlSpaceDecl();
        break;
      case DeclareDefaultNamespace:
        defaultNamespaceDecl();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SemiColon);
    }
  }

  final public void namespaceDecl() throws ParseException {
                          Token t; StringBuffer sb;
    jj_consume_token(DeclareNamespace);
    t = jj_consume_token(NCNameForPrefix);
                                                                                sb = new StringBuffer( t.image );
    jj_consume_token(AssignEquals);
    t = jj_consume_token(URLLiteral);
                                                                  NamespaceDecl jjtn001 = new NamespaceDecl(this, JJTNAMESPACEDECL);
                                                                  boolean jjtc001 = true;
                                                                  jjtree.openNodeScope(jjtn001);
    try {
                                                                  jjtree.closeNodeScope(jjtn001, true);
                                                                  jjtc001 = false;
                                                                        sb.append (':' ); sb.append( t.image );
                                                                        jjtn001.setText( sb.toString() );
    } finally {
                                                                  if (jjtc001) {
                                                                    jjtree.closeNodeScope(jjtn001, true);
                                                                  }
    }
  }

/*	
declare default element namespace "http://default.com"; 1
*/
  final public void defaultNamespaceDecl() throws ParseException {
                                Token t;
    jj_consume_token(DeclareDefaultNamespace);
    t = jj_consume_token(URLLiteral);
                                                          DefaultNamespaceDecl jjtn001 = new DefaultNamespaceDecl(this, JJTDEFAULTNAMESPACEDECL);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
    try {
                                                          jjtree.closeNodeScope(jjtn001, true);
                                                          jjtc001 = false;
                                                                jjtn001.setText( t.image );
                                                                //jjtThis.setText( t.image.substring( 0, t.image.length() ) );

    } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001, true);
                                                          }
    }
  }

  final public void xmlSpaceDecl() throws ParseException {
    jj_consume_token(DeclareXMLSpace);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XMLSpacePreserve:
                                                                    XmlSpacePreserve jjtn001 = new XmlSpacePreserve(this, JJTXMLSPACEPRESERVE);
                                                                    boolean jjtc001 = true;
                                                                    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(XMLSpacePreserve);
      } finally {
                                                                    if (jjtc001) {
                                                                      jjtree.closeNodeScope(jjtn001, true);
                                                                    }
      }
      break;
    case XMLSpaceStrip:
                                                                    XmlSpaceStrip jjtn002 = new XmlSpaceStrip(this, JJTXMLSPACESTRIP);
                                                                    boolean jjtc002 = true;
                                                                    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(XMLSpaceStrip);
      } finally {
                                                                    if (jjtc002) {
                                                                      jjtree.closeNodeScope(jjtn002, true);
                                                                    }
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void queryBody() throws ParseException {
    expr();
  }

  final public void expr() throws ParseException {
    exprSingle();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Comma:
      jj_consume_token(Comma);
                                                           Seq jjtn001 = new Seq(this, JJTSEQ);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
      try {
        expr();
      } catch (Throwable jjte001) {
                                                           if (jjtc001) {
                                                             jjtree.clearNodeScope(jjtn001);
                                                             jjtc001 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte001 instanceof RuntimeException) {
                                                             {if (true) throw (RuntimeException)jjte001;}
                                                           }
                                                           if (jjte001 instanceof ParseException) {
                                                             {if (true) throw (ParseException)jjte001;}
                                                           }
                                                           {if (true) throw (Error)jjte001;}
      } finally {
                                                           if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001,  2);
                                                           }
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  final public void exprSingle() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case For:
    case Let:
      FLWORExpr();
      break;
    case Some:
    case Every:
      quantifiedExpr();
      break;
    case IfLpar:
      ifExpr();
      break;
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
    case StringLiteral:
    case Star:
    case NCNameColonStar:
    case StarColonNCName:
    case Root:
    case RootDescendants:
    case UnaryMinus:
    case UnaryPlus:
    case Lpar:
    case At:
    case NodeLpar:
    case TextLpar:
    case Dot:
    case DotDot:
    case VariableIndicator:
    case QName:
    case StartTagOpen:
    case StartTagOpenRoot:
      orExpr();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FLWORExpr() throws ParseException {
                                  FLWOR jjtn001 = new FLWOR(this, JJTFLWOR);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
    try {
      forLet();
      whereOrderByReturn();
    } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
    } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                  }
    }
  }

  final public void forLet() throws ParseException {
                         /*@bgen(jjtree) ForLet */
  ForLet jjtn000 = new ForLet(this, JJTFORLET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case For:
        jj_consume_token(For);
        forClause();
        break;
      case Let:
        jj_consume_token(Let);
        letClause();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case For:
      case Let:
        forLet();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                                    if (jjtc000) {
                                      jjtree.clearNodeScope(jjtn000);
                                      jjtc000 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte000 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte000;}
                                    }
                                    if (jjte000 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte000;}
                                    }
                                    {if (true) throw (Error)jjte000;}
    } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
    }
  }

  final public void forClause() throws ParseException {
    variable();
    jj_consume_token(In);
                                               For jjtn001 = new For(this, JJTFOR);
                                               boolean jjtc001 = true;
                                               jjtree.openNodeScope(jjtn001);
    try {
      exprSingle();
    } catch (Throwable jjte001) {
                                               if (jjtc001) {
                                                 jjtree.clearNodeScope(jjtn001);
                                                 jjtc001 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte001 instanceof RuntimeException) {
                                                 {if (true) throw (RuntimeException)jjte001;}
                                               }
                                               if (jjte001 instanceof ParseException) {
                                                 {if (true) throw (ParseException)jjte001;}
                                               }
                                               {if (true) throw (Error)jjte001;}
    } finally {
                                               if (jjtc001) {
                                                 jjtree.closeNodeScope(jjtn001,  2);
                                               }
    }
    if (jj_2_1(2)) {
      jj_consume_token(Comma);
                                                                                         For jjtn002 = new For(this, JJTFOR);
                                                                                         boolean jjtc002 = true;
                                                                                         jjtree.openNodeScope(jjtn002);
      try {
        forClause();
      } catch (Throwable jjte002) {
                                                                                         if (jjtc002) {
                                                                                           jjtree.clearNodeScope(jjtn002);
                                                                                           jjtc002 = false;
                                                                                         } else {
                                                                                           jjtree.popNode();
                                                                                         }
                                                                                         if (jjte002 instanceof RuntimeException) {
                                                                                           {if (true) throw (RuntimeException)jjte002;}
                                                                                         }
                                                                                         if (jjte002 instanceof ParseException) {
                                                                                           {if (true) throw (ParseException)jjte002;}
                                                                                         }
                                                                                         {if (true) throw (Error)jjte002;}
      } finally {
                                                                                         if (jjtc002) {
                                                                                           jjtree.closeNodeScope(jjtn002,  2);
                                                                                         }
      }
    } else {
      ;
    }
  }

  final public void letClause() throws ParseException {
    variable();
    jj_consume_token(ColonEquals);
                                                        Let jjtn001 = new Let(this, JJTLET);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
    try {
      exprSingle();
    } catch (Throwable jjte001) {
                                                        if (jjtc001) {
                                                          jjtree.clearNodeScope(jjtn001);
                                                          jjtc001 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte001 instanceof RuntimeException) {
                                                          {if (true) throw (RuntimeException)jjte001;}
                                                        }
                                                        if (jjte001 instanceof ParseException) {
                                                          {if (true) throw (ParseException)jjte001;}
                                                        }
                                                        {if (true) throw (Error)jjte001;}
    } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001,  2);
                                                        }
    }
    if (jj_2_2(2)) {
      jj_consume_token(Comma);
                                                                                         Let jjtn002 = new Let(this, JJTLET);
                                                                                         boolean jjtc002 = true;
                                                                                         jjtree.openNodeScope(jjtn002);
      try {
        letClause();
      } catch (Throwable jjte002) {
                                                                                         if (jjtc002) {
                                                                                           jjtree.clearNodeScope(jjtn002);
                                                                                           jjtc002 = false;
                                                                                         } else {
                                                                                           jjtree.popNode();
                                                                                         }
                                                                                         if (jjte002 instanceof RuntimeException) {
                                                                                           {if (true) throw (RuntimeException)jjte002;}
                                                                                         }
                                                                                         if (jjte002 instanceof ParseException) {
                                                                                           {if (true) throw (ParseException)jjte002;}
                                                                                         }
                                                                                         {if (true) throw (Error)jjte002;}
      } finally {
                                                                                         if (jjtc002) {
                                                                                           jjtree.closeNodeScope(jjtn002,  2);
                                                                                         }
      }
    } else {
      ;
    }
  }

  final public void whereOrderByReturn() throws ParseException {
                                          Return jjtn003 = new Return(this, JJTRETURN);
                                          boolean jjtc003 = true;
                                          jjtree.openNodeScope(jjtn003);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Where:
        jj_consume_token(Where);
                                                     Where jjtn001 = new Where(this, JJTWHERE);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
        try {
          expr();
        } catch (Throwable jjte001) {
                                                     if (jjtc001) {
                                                       jjtree.clearNodeScope(jjtn001);
                                                       jjtc001 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte001 instanceof RuntimeException) {
                                                       {if (true) throw (RuntimeException)jjte001;}
                                                     }
                                                     if (jjte001 instanceof ParseException) {
                                                       {if (true) throw (ParseException)jjte001;}
                                                     }
                                                     {if (true) throw (Error)jjte001;}
        } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                     }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OrderBy:
                                                                            OrderBy jjtn002 = new OrderBy(this, JJTORDERBY);
                                                                            boolean jjtc002 = true;
                                                                            jjtree.openNodeScope(jjtn002);
        try {
          orderByClause();
        } catch (Throwable jjte002) {
                                                                            if (jjtc002) {
                                                                              jjtree.clearNodeScope(jjtn002);
                                                                              jjtc002 = false;
                                                                            } else {
                                                                              jjtree.popNode();
                                                                            }
                                                                            if (jjte002 instanceof RuntimeException) {
                                                                              {if (true) throw (RuntimeException)jjte002;}
                                                                            }
                                                                            if (jjte002 instanceof ParseException) {
                                                                              {if (true) throw (ParseException)jjte002;}
                                                                            }
                                                                            {if (true) throw (Error)jjte002;}
        } finally {
                                                                            if (jjtc002) {
                                                                              jjtree.closeNodeScope(jjtn002, true);
                                                                            }
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(Return);
      exprSingle();
    } catch (Throwable jjte003) {
                                          if (jjtc003) {
                                            jjtree.clearNodeScope(jjtn003);
                                            jjtc003 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte003 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte003;}
                                          }
                                          if (jjte003 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte003;}
                                          }
                                          {if (true) throw (Error)jjte003;}
    } finally {
                                          if (jjtc003) {
                                            jjtree.closeNodeScope(jjtn003, true);
                                          }
    }
  }

  final public void orderByClause() throws ParseException {
    jj_consume_token(OrderBy);
    orderSpecList();
  }

  final public void orderSpecList() throws ParseException {
    orderSpec();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
    case StringLiteral:
    case Star:
    case NCNameColonStar:
    case StarColonNCName:
    case Root:
    case RootDescendants:
    case UnaryMinus:
    case UnaryPlus:
    case Lpar:
    case At:
    case Some:
    case Every:
    case For:
    case Let:
    case NodeLpar:
    case TextLpar:
    case IfLpar:
    case Dot:
    case DotDot:
    case VariableIndicator:
    case QName:
    case StartTagOpen:
    case StartTagOpenRoot:
      orderSpecList();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void orderSpec() throws ParseException {
    exprSingle();
  }

//	some $m in (1,2,3), $n in (4,5,6), $o in (7,8,9) satisfies /result
  final public void quantifiedExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Some:
      jj_consume_token(Some);
      quantifiedIn();
      jj_consume_token(Satisfies);
                                                                                              Some jjtn001 = new Some(this, JJTSOME);
                                                                                              boolean jjtc001 = true;
                                                                                              jjtree.openNodeScope(jjtn001);
      try {
        exprSingle();
      } catch (Throwable jjte001) {
                                                                                              if (jjtc001) {
                                                                                                jjtree.clearNodeScope(jjtn001);
                                                                                                jjtc001 = false;
                                                                                              } else {
                                                                                                jjtree.popNode();
                                                                                              }
                                                                                              if (jjte001 instanceof RuntimeException) {
                                                                                                {if (true) throw (RuntimeException)jjte001;}
                                                                                              }
                                                                                              if (jjte001 instanceof ParseException) {
                                                                                                {if (true) throw (ParseException)jjte001;}
                                                                                              }
                                                                                              {if (true) throw (Error)jjte001;}
      } finally {
                                                                                              if (jjtc001) {
                                                                                                jjtree.closeNodeScope(jjtn001,  2);
                                                                                              }
      }
      break;
    case Every:
      jj_consume_token(Every);
      quantifiedIn();
      jj_consume_token(Satisfies);
                                                                                               Every jjtn002 = new Every(this, JJTEVERY);
                                                                                               boolean jjtc002 = true;
                                                                                               jjtree.openNodeScope(jjtn002);
      try {
        exprSingle();
      } catch (Throwable jjte002) {
                                                                                               if (jjtc002) {
                                                                                                 jjtree.clearNodeScope(jjtn002);
                                                                                                 jjtc002 = false;
                                                                                               } else {
                                                                                                 jjtree.popNode();
                                                                                               }
                                                                                               if (jjte002 instanceof RuntimeException) {
                                                                                                 {if (true) throw (RuntimeException)jjte002;}
                                                                                               }
                                                                                               if (jjte002 instanceof ParseException) {
                                                                                                 {if (true) throw (ParseException)jjte002;}
                                                                                               }
                                                                                               {if (true) throw (Error)jjte002;}
      } finally {
                                                                                               if (jjtc002) {
                                                                                                 jjtree.closeNodeScope(jjtn002,  2);
                                                                                               }
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void quantifiedIn() throws ParseException {
    variable();
    jj_consume_token(In);
                                                      QIn jjtn001 = new QIn(this, JJTQIN);
                                                      boolean jjtc001 = true;
                                                      jjtree.openNodeScope(jjtn001);
    try {
      exprSingle();
    } catch (Throwable jjte001) {
                                                      if (jjtc001) {
                                                        jjtree.clearNodeScope(jjtn001);
                                                        jjtc001 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte001 instanceof RuntimeException) {
                                                        {if (true) throw (RuntimeException)jjte001;}
                                                      }
                                                      if (jjte001 instanceof ParseException) {
                                                        {if (true) throw (ParseException)jjte001;}
                                                      }
                                                      {if (true) throw (Error)jjte001;}
    } finally {
                                                      if (jjtc001) {
                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                      }
    }
    if (jj_2_3(2)) {
      jj_consume_token(Comma);
                                                                                         QIn jjtn002 = new QIn(this, JJTQIN);
                                                                                         boolean jjtc002 = true;
                                                                                         jjtree.openNodeScope(jjtn002);
      try {
        quantifiedIn();
      } catch (Throwable jjte002) {
                                                                                         if (jjtc002) {
                                                                                           jjtree.clearNodeScope(jjtn002);
                                                                                           jjtc002 = false;
                                                                                         } else {
                                                                                           jjtree.popNode();
                                                                                         }
                                                                                         if (jjte002 instanceof RuntimeException) {
                                                                                           {if (true) throw (RuntimeException)jjte002;}
                                                                                         }
                                                                                         if (jjte002 instanceof ParseException) {
                                                                                           {if (true) throw (ParseException)jjte002;}
                                                                                         }
                                                                                         {if (true) throw (Error)jjte002;}
      } finally {
                                                                                         if (jjtc002) {
                                                                                           jjtree.closeNodeScope(jjtn002,  2);
                                                                                         }
      }
    } else {
      ;
    }
  }

  final public void ifExpr() throws ParseException {
                                          IfThenElse jjtn001 = new IfThenElse(this, JJTIFTHENELSE);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(IfLpar);
      expr();
      jj_consume_token(Rpar);
      jj_consume_token(Then);
      exprSingle();
      jj_consume_token(Else);
      exprSingle();
    } catch (Throwable jjte001) {
                                          if (jjtc001) {
                                            jjtree.clearNodeScope(jjtn001);
                                            jjtc001 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte001 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte001;}
                                          }
                                          if (jjte001 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte001;}
                                          }
                                          {if (true) throw (Error)jjte001;}
    } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  3);
                                          }
    }
  }

  final public void orExpr() throws ParseException {
    andExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Or:
      jj_consume_token(Or);
                                                             Or jjtn001 = new Or(this, JJTOR);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
      try {
        andExpr();
      } catch (Throwable jjte001) {
                                                             if (jjtc001) {
                                                               jjtree.clearNodeScope(jjtn001);
                                                               jjtc001 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte001 instanceof RuntimeException) {
                                                               {if (true) throw (RuntimeException)jjte001;}
                                                             }
                                                             if (jjte001 instanceof ParseException) {
                                                               {if (true) throw (ParseException)jjte001;}
                                                             }
                                                             {if (true) throw (Error)jjte001;}
      } finally {
                                                             if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001,  2);
                                                             }
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

//void andExpr(): 	{}		{ comparisonExpr() ( <And> comparisonExpr() #And(2) )? }
  final public void andExpr() throws ParseException {
    comparisonExpr();
    if (jj_2_4(2)) {
      jj_consume_token(And);
                                                                                  And jjtn001 = new And(this, JJTAND);
                                                                                  boolean jjtc001 = true;
                                                                                  jjtree.openNodeScope(jjtn001);
      try {
        andExpr();
      } catch (Throwable jjte001) {
                                                                                  if (jjtc001) {
                                                                                    jjtree.clearNodeScope(jjtn001);
                                                                                    jjtc001 = false;
                                                                                  } else {
                                                                                    jjtree.popNode();
                                                                                  }
                                                                                  if (jjte001 instanceof RuntimeException) {
                                                                                    {if (true) throw (RuntimeException)jjte001;}
                                                                                  }
                                                                                  if (jjte001 instanceof ParseException) {
                                                                                    {if (true) throw (ParseException)jjte001;}
                                                                                  }
                                                                                  {if (true) throw (Error)jjte001;}
      } finally {
                                                                                  if (jjtc001) {
                                                                                    jjtree.closeNodeScope(jjtn001,  2);
                                                                                  }
      }
    } else {
      ;
    }
  }

  final public void comparisonExpr() throws ParseException {
                         Token t;
    rangeExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Equals:
    case Is:
    case NotEquals:
    case IsNot:
    case LtEquals:
    case LtLt:
    case GtEquals:
    case GtGt:
    case FortranEq:
    case FortranNe:
    case FortranGt:
    case FortranGe:
    case FortranLt:
    case FortranLe:
    case Lt:
    case Gt:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FortranEq:
      case FortranNe:
      case FortranGt:
      case FortranGe:
      case FortranLt:
      case FortranLe:
        t = valueComp();
        rangeExpr();
                                                                                                      ValueComp jjtn001 = new ValueComp(this, JJTVALUECOMP);
                                                                                                      boolean jjtc001 = true;
                                                                                                      jjtree.openNodeScope(jjtn001);
        try {
                                                                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                                                                      jjtc001 = false;
                                                                                                     jjtn001.setText(t.image);
        } finally {
                                                                                                      if (jjtc001) {
                                                                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                                                                      }
        }
        break;
      case Equals:
      case NotEquals:
      case LtEquals:
      case GtEquals:
      case Lt:
      case Gt:
        t = generalComp();
        rangeExpr();
                                                                                                      GeneralComp jjtn002 = new GeneralComp(this, JJTGENERALCOMP);
                                                                                                      boolean jjtc002 = true;
                                                                                                      jjtree.openNodeScope(jjtn002);
        try {
                                                                                                      jjtree.closeNodeScope(jjtn002,  2);
                                                                                                      jjtc002 = false;
                                                                                                     jjtn002.setText(t.image);
        } finally {
                                                                                                      if (jjtc002) {
                                                                                                        jjtree.closeNodeScope(jjtn002,  2);
                                                                                                      }
        }
        break;
      case Is:
      case IsNot:
        t = nodeComp();
        rangeExpr();
                                                                                                      NodeComp jjtn003 = new NodeComp(this, JJTNODECOMP);
                                                                                                      boolean jjtc003 = true;
                                                                                                      jjtree.openNodeScope(jjtn003);
        try {
                                                                                                      jjtree.closeNodeScope(jjtn003,  2);
                                                                                                      jjtc003 = false;
                                                                                                     jjtn003.setText(t.image);
        } finally {
                                                                                                      if (jjtc003) {
                                                                                                        jjtree.closeNodeScope(jjtn003,  2);
                                                                                                      }
        }
        break;
      case LtLt:
      case GtGt:
        t = orderComp();
        rangeExpr();
                                                                                                      OrderComp jjtn004 = new OrderComp(this, JJTORDERCOMP);
                                                                                                      boolean jjtc004 = true;
                                                                                                      jjtree.openNodeScope(jjtn004);
        try {
                                                                                                      jjtree.closeNodeScope(jjtn004,  2);
                                                                                                      jjtc004 = false;
                                                                                                     jjtn004.setText(t.image);
        } finally {
                                                                                                      if (jjtc004) {
                                                                                                        jjtree.closeNodeScope(jjtn004,  2);
                                                                                                      }
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public Token valueComp() throws ParseException {
                     Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FortranEq:
      t = jj_consume_token(FortranEq);
      break;
    case FortranNe:
      t = jj_consume_token(FortranNe);
      break;
    case FortranLt:
      t = jj_consume_token(FortranLt);
      break;
    case FortranLe:
      t = jj_consume_token(FortranLe);
      break;
    case FortranGt:
      t = jj_consume_token(FortranGt);
      break;
    case FortranGe:
      t = jj_consume_token(FortranGe);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                                                                                 {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token generalComp() throws ParseException {
                       Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Equals:
      t = jj_consume_token(Equals);
      break;
    case NotEquals:
      t = jj_consume_token(NotEquals);
      break;
    case Lt:
      t = jj_consume_token(Lt);
      break;
    case LtEquals:
      t = jj_consume_token(LtEquals);
      break;
    case Gt:
      t = jj_consume_token(Gt);
      break;
    case GtEquals:
      t = jj_consume_token(GtEquals);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                                                                            {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token nodeComp() throws ParseException {
                    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Is:
      t = jj_consume_token(Is);
      break;
    case IsNot:
      t = jj_consume_token(IsNot);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token orderComp() throws ParseException {
                     Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LtLt:
      t = jj_consume_token(LtLt);
      break;
    case GtGt:
      t = jj_consume_token(GtGt);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                                         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// void rangeExpr(): {}		{ pathExpr() ( <To> pathExpr() #Range(2) )* }

//new arithmetic functions added 10may05 from v0.65+
  final public void rangeExpr() throws ParseException {
    additiveExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case To:
      jj_consume_token(To);
                                                          Range jjtn001 = new Range(this, JJTRANGE);
                                                          boolean jjtc001 = true;
                                                          jjtree.openNodeScope(jjtn001);
      try {
        rangeExpr();
      } catch (Throwable jjte001) {
                                                          if (jjtc001) {
                                                            jjtree.clearNodeScope(jjtn001);
                                                            jjtc001 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte001 instanceof RuntimeException) {
                                                            {if (true) throw (RuntimeException)jjte001;}
                                                          }
                                                          if (jjte001 instanceof ParseException) {
                                                            {if (true) throw (ParseException)jjte001;}
                                                          }
                                                          {if (true) throw (Error)jjte001;}
      } finally {
                                                          if (jjtc001) {
                                                            jjtree.closeNodeScope(jjtn001,  2);
                                                          }
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  final public void additiveExpr() throws ParseException {
                       Token t;
    multiplicativeExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Minus:
    case Plus:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Plus:
        t = jj_consume_token(Plus);
        break;
      case Minus:
        t = jj_consume_token(Minus);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      additiveExpr();
                                                                                 Additive jjtn001 = new Additive(this, JJTADDITIVE);
                                                                                 boolean jjtc001 = true;
                                                                                 jjtree.openNodeScope(jjtn001);
      try {
                                                                                 jjtree.closeNodeScope(jjtn001,  2);
                                                                                 jjtc001 = false;
                                                                                 jjtn001.setText( t.image );
      } finally {
                                                                                 if (jjtc001) {
                                                                                   jjtree.closeNodeScope(jjtn001,  2);
                                                                                 }
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  final public void multiplicativeExpr() throws ParseException {
                                  Token t; String opCode;
    unaryExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Div:
    case Idiv:
    case Mod:
    case Multiply:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Multiply:
        t = jj_consume_token(Multiply);
                                                                                                  opCode = "*";
        break;
      case Div:
        t = jj_consume_token(Div);
                                                                                                          opCode = "/";
        break;
      case Idiv:
        t = jj_consume_token(Idiv);
                                                                                                          opCode = "i";
        break;
      case Mod:
        t = jj_consume_token(Mod);
                                                                                                          opCode = "m";
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      multiplicativeExpr();
                                                                                       Multiplicative jjtn001 = new Multiplicative(this, JJTMULTIPLICATIVE);
                                                                                       boolean jjtc001 = true;
                                                                                       jjtree.openNodeScope(jjtn001);
      try {
                                                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                                                       jjtc001 = false;
                                                                                       jjtn001.setText( opCode );
      } finally {
                                                                                       if (jjtc001) {
                                                                                         jjtree.closeNodeScope(jjtn001,  2);
                                                                                       }
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  final public void unaryExpr() throws ParseException {
                                      /*@bgen(jjtree) #Unary( isUnary) */
                                       Unary jjtn000 = new Unary(this, JJTUNARY);
                                       boolean jjtc000 = true;
                                       jjtree.openNodeScope(jjtn000);boolean isUnary = false;
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UnaryMinus:
        case UnaryPlus:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UnaryMinus:
          jj_consume_token(UnaryMinus);
                                                                            isUnary = true; jjtn000.setText("-");
          break;
        case UnaryPlus:
          jj_consume_token(UnaryPlus);
                                                                                                                                      isUnary = true;jjtn000.setText("+");
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      pathExpr();
    } catch (Throwable jjte000) {
                                                            if (jjtc000) {
                                                              jjtree.clearNodeScope(jjtn000);
                                                              jjtc000 = false;
                                                            } else {
                                                              jjtree.popNode();
                                                            }
                                                            if (jjte000 instanceof RuntimeException) {
                                                              {if (true) throw (RuntimeException)jjte000;}
                                                            }
                                                            if (jjte000 instanceof ParseException) {
                                                              {if (true) throw (ParseException)jjte000;}
                                                            }
                                                            {if (true) throw (Error)jjte000;}
    } finally {
                                                            if (jjtc000) {
                                                              jjtree.closeNodeScope(jjtn000,  isUnary);
                                                            }
    }
  }

  final public void pathExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
    case StringLiteral:
    case Star:
    case NCNameColonStar:
    case StarColonNCName:
    case Lpar:
    case At:
    case NodeLpar:
    case TextLpar:
    case Dot:
    case DotDot:
    case VariableIndicator:
    case QName:
    case StartTagOpen:
    case StartTagOpenRoot:
      relativePathExpr();
      break;
    case Root:
      jj_consume_token(Root);
      if (jj_2_5(2)) {
                                                                                  SlashRoot jjtn001 = new SlashRoot(this, JJTSLASHROOT);
                                                                                  boolean jjtc001 = true;
                                                                                  jjtree.openNodeScope(jjtn001);
        try {
          relativePathExpr();
        } catch (Throwable jjte001) {
                                                                                  if (jjtc001) {
                                                                                    jjtree.clearNodeScope(jjtn001);
                                                                                    jjtc001 = false;
                                                                                  } else {
                                                                                    jjtree.popNode();
                                                                                  }
                                                                                  if (jjte001 instanceof RuntimeException) {
                                                                                    {if (true) throw (RuntimeException)jjte001;}
                                                                                  }
                                                                                  if (jjte001 instanceof ParseException) {
                                                                                    {if (true) throw (ParseException)jjte001;}
                                                                                  }
                                                                                  {if (true) throw (Error)jjte001;}
        } finally {
                                                                                  if (jjtc001) {
                                                                                    jjtree.closeNodeScope(jjtn001, true);
                                                                                  }
        }
      } else {
        ;
      }
      break;
    case RootDescendants:
      jj_consume_token(RootDescendants);
                                                                              SlashSlashRoot jjtn002 = new SlashSlashRoot(this, JJTSLASHSLASHROOT);
                                                                              boolean jjtc002 = true;
                                                                              jjtree.openNodeScope(jjtn002);
      try {
        relativePathExpr();
      } catch (Throwable jjte002) {
                                                                              if (jjtc002) {
                                                                                jjtree.clearNodeScope(jjtn002);
                                                                                jjtc002 = false;
                                                                              } else {
                                                                                jjtree.popNode();
                                                                              }
                                                                              if (jjte002 instanceof RuntimeException) {
                                                                                {if (true) throw (RuntimeException)jjte002;}
                                                                              }
                                                                              if (jjte002 instanceof ParseException) {
                                                                                {if (true) throw (ParseException)jjte002;}
                                                                              }
                                                                              {if (true) throw (Error)jjte002;}
      } finally {
                                                                              if (jjtc002) {
                                                                                jjtree.closeNodeScope(jjtn002, true);
                                                                              }
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void relativePathExpr() throws ParseException {
                              Token t;
    stepExpr();
    if (jj_2_6(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Slash:
        t = jj_consume_token(Slash);
        break;
      case SlashSlash:
        t = jj_consume_token(SlashSlash);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      relativePathExpr();
                                                     RelPath jjtn001 = new RelPath(this, JJTRELPATH);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
      try {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                     jjtc001 = false;
                                                     jjtn001.setText( t.image);
      } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                     }
      }
    } else {
      ;
    }
  }

  final public void stepExpr() throws ParseException {
    if (jj_2_7(2)) {
      primaryExpr();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Star:
      case NCNameColonStar:
      case StarColonNCName:
      case At:
      case NodeLpar:
      case TextLpar:
      case Dot:
      case QName:
        forwardStep();
        break;
      case DotDot:
        reverseStep();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Lbrack:
      predicates();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  final public void forwardStep() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Dot:
                                  Dot jjtn001 = new Dot(this, JJTDOT);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(Dot);
      } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                  }
      }
      break;
    case At:
      attribute();
      break;
    case Star:
    case NCNameColonStar:
    case StarColonNCName:
    case NodeLpar:
    case TextLpar:
    case QName:
      nodeTest();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*								  	
void forwardStep(): {}	    { ( <Dot> }
								  {	String priorToken = token_source.getPriorPriorToken().image;
								  	jjtThis.setText( priorToken ); } #Dot
							  ) | attribute() | nodeTest() }
*/
  final public void attribute() throws ParseException {
    jj_consume_token(At);
                                     Attribute jjtn001 = new Attribute(this, JJTATTRIBUTE);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
    try {
      nameTest();
    } catch (Throwable jjte001) {
                                     if (jjtc001) {
                                       jjtree.clearNodeScope(jjtn001);
                                       jjtc001 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte001 instanceof RuntimeException) {
                                       {if (true) throw (RuntimeException)jjte001;}
                                     }
                                     if (jjte001 instanceof ParseException) {
                                       {if (true) throw (ParseException)jjte001;}
                                     }
                                     {if (true) throw (Error)jjte001;}
    } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001, true);
                                     }
    }
  }

  final public void nameTest() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QName:
      qName();
      break;
    case Star:
    case NCNameColonStar:
    case StarColonNCName:
      wildcard();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void nodeTest() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NodeLpar:
    case TextLpar:
      kindTest();
      break;
    case Star:
    case NCNameColonStar:
    case StarColonNCName:
    case QName:
      nameTest();
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void kindTest() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TextLpar:
      textTest();
      break;
    case NodeLpar:
      anyKindTest();
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void reverseStep() throws ParseException {
                                    Parent jjtn001 = new Parent(this, JJTPARENT);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(DotDot);
    } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                    }
    }
  }

  final public void wildcard() throws ParseException {
                             /*@bgen(jjtree) QName */
                              QName jjtn000 = new QName(this, JJTQNAME);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Star:
        t = jj_consume_token(Star);
        break;
      case StarColonNCName:
        t = jj_consume_token(StarColonNCName);
        break;
      case NCNameColonStar:
        t = jj_consume_token(NCNameColonStar);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                        String text = t.image;
                                        if ( text.equals( "*" ) ) text = "*:*";
                                        jjtn000.setText( text );
    } finally {
                                if (jjtc000) {
                                  jjtree.closeNodeScope(jjtn000, true);
                                }
    }
  }

  final public void textTest() throws ParseException {
    jj_consume_token(TextLpar);
                                               TextTest jjtn001 = new TextTest(this, JJTTEXTTEST);
                                               boolean jjtc001 = true;
                                               jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(RparForKindTest);
    } finally {
                                               if (jjtc001) {
                                                 jjtree.closeNodeScope(jjtn001, true);
                                               }
    }
  }

                                                                        // good enuf for now
  final public void anyKindTest() throws ParseException {
    jj_consume_token(NodeLpar);
                                                NodeTest jjtn001 = new NodeTest(this, JJTNODETEST);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(RparForKindTest);
    } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001, true);
                                                }
    }
  }

                                                                        // ""
  final public void predicates() throws ParseException {
    jj_consume_token(Lbrack);
    expr();
                                                Filter jjtn001 = new Filter(this, JJTFILTER);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(Rbrack);
    } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Lbrack:
      predicates();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
  }

  final public void primaryExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
    case StringLiteral:
      literal();
      break;
    case QName:
      functionCall();
      break;
    case VariableIndicator:
      variable();
      break;
    case Lpar:
      parensExpr();
      break;
    case StartTagOpen:
    case StartTagOpenRoot:
      constructor();
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void constructor() throws ParseException {
    elementConstructor();
  }

                                                         // | computedElementConstructor() | computedAttributeConstructor() }}
  final public void elementConstructor() throws ParseException {
                                  int numChildren = 1; boolean isRoot;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case StartTagOpenRoot:
      jj_consume_token(StartTagOpenRoot);
                                                       isRoot = true;
      break;
    case StartTagOpen:
      jj_consume_token(StartTagOpen);
                                                                                           isRoot = false;
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    tagQName();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_4;
      }
      attributeList();
                                                                               ++numChildren;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EmptyTagClose:
      jj_consume_token(EmptyTagClose);
                                                      EmptyTag jjtn001 = new EmptyTag(this, JJTEMPTYTAG);
                                                      boolean jjtc001 = true;
                                                      jjtree.openNodeScope(jjtn001);
      try {
                                                      jjtree.closeNodeScope(jjtn001,  numChildren);
                                                      jjtc001 = false;
                                                      if (isRoot) jjtn001.setText("root");
      } finally {
                                                      if (jjtc001) {
                                                        jjtree.closeNodeScope(jjtn001,  numChildren);
                                                      }
      }
      break;
    case StartTagClose:
      jj_consume_token(StartTagClose);
                                                      ++numChildren;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case StartTagOpen:
      case StartTagOpenRoot:
      case Lbrace:
      case LCurlyBraceEscape:
      case ElementContentChar:
        content();
                                                  ++numChildren;
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      endTag();
                                                                                 Tag jjtn002 = new Tag(this, JJTTAG);
                                                                                 boolean jjtc002 = true;
                                                                                 jjtree.openNodeScope(jjtn002);
      try {
                                                                                 jjtree.closeNodeScope(jjtn002,  numChildren);
                                                                                 jjtc002 = false;
                                                                                 if (isRoot) jjtn002.setText("root");
      } finally {
                                                                                 if (jjtc002) {
                                                                                   jjtree.closeNodeScope(jjtn002,  numChildren);
                                                                                 }
      }
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void attributeList() throws ParseException {
                                       /*@bgen(jjtree) #Attribute(> 0) */
  Attribute jjtn000 = new Attribute(this, JJTATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S);
      tagQName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        jj_consume_token(S);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      jj_consume_token(ValueIndicator);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        jj_consume_token(S);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      attributeValue();
    } catch (Throwable jjte000) {
                                    if (jjtc000) {
                                      jjtree.clearNodeScope(jjtn000);
                                      jjtc000 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte000 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte000;}
                                    }
                                    if (jjte000 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte000;}
                                    }
                                    {if (true) throw (Error)jjte000;}
    } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
                                    }
    }
  }

  final public void attributeValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OpenQuot:
      jj_consume_token(OpenQuot);
      quotAttrValueContent();
      jj_consume_token(CloseQuot);
      break;
    case OpenApos:
      jj_consume_token(OpenApos);
      aposAttrValueContent();
      jj_consume_token(CloseApos);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void quotAttrValueContent() throws ParseException {
                                                 /*@bgen(jjtree) AttributeContent */
                                                  AttributeContent jjtn000 = new AttributeContent(this, JJTATTRIBUTECONTENT);
                                                  boolean jjtc000 = true;
                                                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QuotAttContentChar:
        quotAttrCharData();
        break;
      case CharRef:
                                                                          CharRef jjtn001 = new CharRef(this, JJTCHARREF);
                                                                          boolean jjtc001 = true;
                                                                          jjtree.openNodeScope(jjtn001);
        try {
          t = jj_consume_token(CharRef);
        } finally {
                                                                          if (jjtc001) {
                                                                            jjtree.closeNodeScope(jjtn001, true);
                                                                          }
        }
                                                                                      jjtn000.setText( t.image );
        break;
      case LCurlyBraceEscape:
                                                                          CharData jjtn002 = new CharData(this, JJTCHARDATA);
                                                                          boolean jjtc002 = true;
                                                                          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(LCurlyBraceEscape);
        } finally {
                                                                          if (jjtc002) {
                                                                            jjtree.closeNodeScope(jjtn002, true);
                                                                          }
        }
                                                                                              jjtn000.setText( "{" );
        break;
      case RCurlyBraceEscape:
                                                                          CharData jjtn003 = new CharData(this, JJTCHARDATA);
                                                                          boolean jjtc003 = true;
                                                                          jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(RCurlyBraceEscape);
        } finally {
                                                                          if (jjtc003) {
                                                                            jjtree.closeNodeScope(jjtn003, true);
                                                                          }
        }
                                                                                              jjtn000.setText( "}" );
        break;
      case Lbrace:
        enclosedExpr();
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CharRef:
      case Lbrace:
      case LCurlyBraceEscape:
      case RCurlyBraceEscape:
      case QuotAttContentChar:
        quotAttrValueContent();
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                                                                   if (jjtc000) {
                                                                     jjtree.clearNodeScope(jjtn000);
                                                                     jjtc000 = false;
                                                                   } else {
                                                                     jjtree.popNode();
                                                                   }
                                                                   if (jjte000 instanceof RuntimeException) {
                                                                     {if (true) throw (RuntimeException)jjte000;}
                                                                   }
                                                                   if (jjte000 instanceof ParseException) {
                                                                     {if (true) throw (ParseException)jjte000;}
                                                                   }
                                                                   {if (true) throw (Error)jjte000;}
    } finally {
                                                                   if (jjtc000) {
                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                   }
    }
  }

  final public void aposAttrValueContent() throws ParseException {
                                                 /*@bgen(jjtree) AttributeContent */
                                                  AttributeContent jjtn000 = new AttributeContent(this, JJTATTRIBUTECONTENT);
                                                  boolean jjtc000 = true;
                                                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AposAttContentChar:
        aposAttrCharData();
        break;
      case CharRef:
                                                                          CharRef jjtn001 = new CharRef(this, JJTCHARREF);
                                                                          boolean jjtc001 = true;
                                                                          jjtree.openNodeScope(jjtn001);
        try {
          t = jj_consume_token(CharRef);
        } finally {
                                                                          if (jjtc001) {
                                                                            jjtree.closeNodeScope(jjtn001, true);
                                                                          }
        }
                                                                                      jjtn000.setText( t.image );
        break;
      case LCurlyBraceEscape:
                                                                          CharData jjtn002 = new CharData(this, JJTCHARDATA);
                                                                          boolean jjtc002 = true;
                                                                          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(LCurlyBraceEscape);
        } finally {
                                                                          if (jjtc002) {
                                                                            jjtree.closeNodeScope(jjtn002, true);
                                                                          }
        }
                                                                                              jjtn000.setText( "{" );
        break;
      case RCurlyBraceEscape:
                                                                          CharData jjtn003 = new CharData(this, JJTCHARDATA);
                                                                          boolean jjtc003 = true;
                                                                          jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(RCurlyBraceEscape);
        } finally {
                                                                          if (jjtc003) {
                                                                            jjtree.closeNodeScope(jjtn003, true);
                                                                          }
        }
                                                                                              jjtn000.setText( "}" );
        break;
      case Lbrace:
        enclosedExpr();
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CharRef:
      case Lbrace:
      case LCurlyBraceEscape:
      case RCurlyBraceEscape:
      case AposAttContentChar:
        aposAttrValueContent();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                                                                   if (jjtc000) {
                                                                     jjtree.clearNodeScope(jjtn000);
                                                                     jjtc000 = false;
                                                                   } else {
                                                                     jjtree.popNode();
                                                                   }
                                                                   if (jjte000 instanceof RuntimeException) {
                                                                     {if (true) throw (RuntimeException)jjte000;}
                                                                   }
                                                                   if (jjte000 instanceof ParseException) {
                                                                     {if (true) throw (ParseException)jjte000;}
                                                                   }
                                                                   {if (true) throw (Error)jjte000;}
    } finally {
                                                                   if (jjtc000) {
                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                   }
    }
  }

  final public void quotAttrCharData() throws ParseException {
                                     /*@bgen(jjtree) CharData */
                                      CharData jjtn000 = new CharData(this, JJTCHARDATA);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);Token t; StringBuffer sb = new StringBuffer();
    try {
      label_5:
      while (true) {
        t = jj_consume_token(QuotAttContentChar);
                                                                          sb.append( t.image );
        if (jj_2_8(2)) {
          ;
        } else {
          break label_5;
        }
      }
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.setText( sb.toString() );
    } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
    }
  }

  final public void aposAttrCharData() throws ParseException {
                                     /*@bgen(jjtree) CharData */
                                      CharData jjtn000 = new CharData(this, JJTCHARDATA);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);Token t; StringBuffer sb = new StringBuffer();
    try {
      label_6:
      while (true) {
        t = jj_consume_token(AposAttContentChar);
                                                                          sb.append( t.image );
        if (jj_2_9(2)) {
          ;
        } else {
          break label_6;
        }
      }
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.setText( sb.toString() );
    } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
    }
  }

  final public void tagQName() throws ParseException {
                         /*@bgen(jjtree) QName */
                          QName jjtn000 = new QName(this, JJTQNAME);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(TagQName);
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                                 jjtn000.setText( t.image);
    } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
    }
  }

  final public void endTag() throws ParseException {
    jj_consume_token(EndTagOpen);
    tagQName();
    jj_consume_token(EndTagClose);
  }

  final public void content() throws ParseException {
                          /*@bgen(jjtree) Content */
  Content jjtn000 = new Content(this, JJTCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ElementContentChar:
        charData();
        break;
      case Lbrace:
        enclosedExpr();
        break;
      case LCurlyBraceEscape:
                                        CharData jjtn001 = new CharData(this, JJTCHARDATA);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(LCurlyBraceEscape);
        } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001, true);
                                        }
        }
                                                            jjtn000.setText( "{" );
        break;
      case StartTagOpen:
      case StartTagOpenRoot:
        elementConstructor();
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case StartTagOpen:
      case StartTagOpenRoot:
      case Lbrace:
      case LCurlyBraceEscape:
      case ElementContentChar:
        content();
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                                    if (jjtc000) {
                                      jjtree.clearNodeScope(jjtn000);
                                      jjtc000 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte000 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte000;}
                                    }
                                    if (jjte000 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte000;}
                                    }
                                    {if (true) throw (Error)jjte000;}
    } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
    }
  }

  final public void enclosedExpr() throws ParseException {
                                     /*@bgen(jjtree) EnclosedExpr */
  EnclosedExpr jjtn000 = new EnclosedExpr(this, JJTENCLOSEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(Lbrace);
      expr();
      jj_consume_token(Rbrace);
    } catch (Throwable jjte000) {
                                           if (jjtc000) {
                                             jjtree.clearNodeScope(jjtn000);
                                             jjtc000 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte000 instanceof RuntimeException) {
                                             {if (true) throw (RuntimeException)jjte000;}
                                           }
                                           if (jjte000 instanceof ParseException) {
                                             {if (true) throw (ParseException)jjte000;}
                                           }
                                           {if (true) throw (Error)jjte000;}
    } finally {
                                           if (jjtc000) {
                                             jjtree.closeNodeScope(jjtn000, true);
                                           }
    }
  }

  final public void charData() throws ParseException {
                                 /*@bgen(jjtree) CharData */
                                  CharData jjtn000 = new CharData(this, JJTCHARDATA);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t; StringBuffer sb = new StringBuffer();
    try {
      label_7:
      while (true) {
        t = jj_consume_token(ElementContentChar);
                                                                          sb.append( t.image );
        if (jj_2_10(2)) {
          ;
        } else {
          break label_7;
        }
      }
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.setText( sb.toString() );
    } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
    }
  }

  final public void variable() throws ParseException {
                             /*@bgen(jjtree) Variable */
  Variable jjtn000 = new Variable(this, JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VariableIndicator);
      varName();
    } catch (Throwable jjte000) {
                                                            if (jjtc000) {
                                                              jjtree.clearNodeScope(jjtn000);
                                                              jjtc000 = false;
                                                            } else {
                                                              jjtree.popNode();
                                                            }
                                                            if (jjte000 instanceof RuntimeException) {
                                                              {if (true) throw (RuntimeException)jjte000;}
                                                            }
                                                            if (jjte000 instanceof ParseException) {
                                                              {if (true) throw (ParseException)jjte000;}
                                                            }
                                                            {if (true) throw (Error)jjte000;}
    } finally {
                                                            if (jjtc000) {
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                            }
    }
  }

  final public void varName() throws ParseException {
                                 /*@bgen(jjtree) QName */
                                  QName jjtn000 = new QName(this, JJTQNAME);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(VarName);
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtc000 = false;
                                                                jjtn000.setText(t.image);
    } finally {
                                                    if (jjtc000) {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                    }
    }
  }

  final public void literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
      integerLiteral();
      break;
    case StringLiteral:
      stringLiteral();
      break;
    case DoubleLiteral:
      doubleLiteral();
      break;
    case DecimalLiteral:
      decimalLiteral();
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parensExpr() throws ParseException {
                             /*@bgen(jjtree) Parens */
  Parens jjtn000 = new Parens(this, JJTPARENS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(Lpar);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case Star:
      case NCNameColonStar:
      case StarColonNCName:
      case Root:
      case RootDescendants:
      case UnaryMinus:
      case UnaryPlus:
      case Lpar:
      case At:
      case Some:
      case Every:
      case For:
      case Let:
      case NodeLpar:
      case TextLpar:
      case IfLpar:
      case Dot:
      case DotDot:
      case VariableIndicator:
      case QName:
      case StartTagOpen:
      case StartTagOpenRoot:
        expr();
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      jj_consume_token(Rpar);
    } catch (Throwable jjte000) {
                                   if (jjtc000) {
                                     jjtree.clearNodeScope(jjtn000);
                                     jjtc000 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte000 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte000;}
                                   }
                                   if (jjte000 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte000;}
                                   }
                                   {if (true) throw (Error)jjte000;}
    } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
    }
  }

  final public void qName() throws ParseException {
                             /*@bgen(jjtree) QName */
                              QName jjtn000 = new QName(this, JJTQNAME);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(QName);
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtc000 = false;
                                                       jjtn000.setText(t.image);
    } finally {
                                             if (jjtc000) {
                                               jjtree.closeNodeScope(jjtn000, true);
                                             }
    }
  }

  final public void integerLiteral() throws ParseException {
                                     /*@bgen(jjtree) IntegerLit */
                                      IntegerLit jjtn000 = new IntegerLit(this, JJTINTEGERLIT);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IntegerLiteral);
                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                         jjtc000 = false;
                                                                         jjtn000.setText(t.image);
    } finally {
                                                      if (jjtc000) {
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                      }
    }
  }

  final public void stringLiteral() throws ParseException {
                                   /*@bgen(jjtree) StringLit */
                                    StringLit jjtn000 = new StringLit(this, JJTSTRINGLIT);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(StringLiteral);
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                      String noQuotes = new String( t.image.substring(1, t.image.length()-1) );
                                                  jjtn000.setText( noQuotes );
    } finally {
                                                    if (jjtc000) {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                    }
    }
  }

  final public void doubleLiteral() throws ParseException {
                                         /*@bgen(jjtree) DoubleLit */
                                          DoubleLit jjtn000 = new DoubleLit(this, JJTDOUBLELIT);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DoubleLiteral);
                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                           jjtc000 = false;
                                                                           jjtn000.setText(t.image);
    } finally {
                                                         if (jjtc000) {
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                         }
    }
  }

  final public void decimalLiteral() throws ParseException {
                                     /*@bgen(jjtree) DecimalLit */
                                      DecimalLit jjtn000 = new DecimalLit(this, JJTDECIMALLIT);
                                      boolean jjtc000 = true;
                                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DecimalLiteral);
                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                        jjtc000 = false;
                                                                        jjtn000.setText(t.image);
    } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                     }
    }
  }

  final public void functionCall() throws ParseException {
                         int child = 1;
    qName();
    jj_consume_token(Lpar);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
    case StringLiteral:
    case Star:
    case NCNameColonStar:
    case StarColonNCName:
    case Root:
    case RootDescendants:
    case UnaryMinus:
    case UnaryPlus:
    case Lpar:
    case At:
    case Some:
    case Every:
    case For:
    case Let:
    case NodeLpar:
    case TextLpar:
    case IfLpar:
    case Dot:
    case DotDot:
    case VariableIndicator:
    case QName:
    case StartTagOpen:
    case StartTagOpenRoot:
      expr();
                                                   ++child;
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
                                                                  FunctionCall jjtn001 = new FunctionCall(this, JJTFUNCTIONCALL);
                                                                  boolean jjtc001 = true;
                                                                  jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(Rpar);
    } finally {
                                                                  if (jjtc001) {
                                                                    jjtree.closeNodeScope(jjtn001,  child);
                                                                  }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(And)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(Comma)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(Every)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(Some)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(Comma)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(Comma)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(IfLpar)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(DoubleLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(DecimalLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(Let)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(StringLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(IntegerLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(VariableIndicator)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(QName)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(VarName)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(For)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(Lpar)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(Lpar)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    if (jj_scan_token(Rpar)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(ElementContentChar)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(StartTagOpen)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(TagQName)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(AposAttContentChar)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(UnaryPlus)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(QuotAttContentChar)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(StartTagOpenRoot)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(NodeLpar)) return true;
    if (jj_scan_token(RparForKindTest)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(TextLpar)) return true;
    if (jj_scan_token(RparForKindTest)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(Lbrack)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(DotDot)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(RootDescendants)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(UnaryMinus)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(Root)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(At)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) return true;
    }
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(Dot)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    return false;
  }

  public XQueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[53];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
      jj_la1_6();
      jj_la1_7();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x80,0x200000,0x200000,0x0,0x0,0x3c000,0x0,0x0,0x0,0x0,0x3c000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c000,0x0,0x8000000,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c000,0x3c000,0x3c000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78000,0x78000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x210,0x210,0xc0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x1e800,0x0,0x0,0x0,0x0,0x1e800,0x0,0x0,0xffe80000,0xffe80000,0xf0000000,0x5480000,0xa00000,0xa000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e800,0x60000,0x6800,0x0,0x6800,0x6800,0x6800,0x0,0x6800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e800,0x1e800,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x786180,0x600000,0x600000,0x0,0x0,0x786180,0x180000,0x0,0x1b,0x1b,0x3,0x18,0x0,0x0,0x0,0x60,0x60,0x0,0x0,0x180,0x180,0x6000,0x0,0x4000,0x8000,0x4000,0x0,0x0,0x0,0x0,0x8000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x786180,0x786180,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x4000,0x60100a,0x0,0x0,0x0,0x800000,0x60100a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000a,0x0,0x60000a,0x0,0x20000a,0x0,0xa,0xa,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60100a,0x60100a,};
   }
   private static void jj_la1_6() {
      jj_la1_6 = new int[] {0x0,0x0,0x0,0x0,0x0,0x30102,0x0,0x0,0x0,0x0,0x30102,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30102,0x0,0x100,0x0,0x100,0x100,0x100,0x0,0x0,0x0,0x30102,0x30000,0x0,0x5030000,0xc0000,0x0,0x0,0x20000000,0xd008000,0xd008000,0xd008000,0xd008000,0x5030000,0x5030000,0x0,0x30102,0x30102,};
   }
   private static void jj_la1_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x2,0x2,0x4,0x4,0x1,0x1,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public XQueryParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public XQueryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XQueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public XQueryParser(XQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(XQueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[238];
    for (int i = 0; i < 238; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 53; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 238; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                           }
